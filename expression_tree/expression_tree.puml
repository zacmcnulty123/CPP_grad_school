@startuml

class Tree {
  +virtual std::string toString() const = 0
  +virtual double eval(const std::map<std::string, double> vars) const = 0
  +virtual Tree* derive(const std::string var) const = 0
  +Tree()
  ~Tree()
}

class Add {
  __Private__
  +const Tree* getLeft() const
  +const Tree* getRight() const
  __Public__
  +virtual std::string toString() const
  +virtual double eval(const std::map<std::string, double> vars) const
  +virtual Tree* derive(const std::string) const
  const Tree* left
  const Tree* right
  +Add(const Tree* lhs, const Tree* rhs)
  +Add(const Add* root)
  ~Tree*()
}

class Sub {
  __Private__
  +const Tree* getLeft() const
  +const Tree* getRight() const
  __Public__
  +virtual std::string toString() const
  +virtual double eval(const std::map<std::string, double> vars) const
  +virtual Tree* derive(const std::string) const
  const Tree* left
  const Tree* right
  +Sub(const Tree* lhs, const Tree* rhs)
  +Sub(const Sub* root)
  ~Tree*()
}

class Mul {
  __Private__
  +const Tree* getLeft() const
  +const Tree* getRight() const
  __Public__
  +virtual std::string toString() const
  +virtual double eval(const std::map<std::string, double> vars) const
  +virtual Tree* derive(const std::string) const
  const Tree* left
  const Tree* right
  +Mul(const Tree* lhs, const Tree* rhs)
  +Mul(const Mul* root)
  ~Tree*()
}

class Div {
  __Private__
  +const Tree* getLeft() const
  +const Tree* getRight() const
  __Public__
  +virtual std::string toString() const
  +virtual double eval(const std::map<std::string, double> vars) const
  +virtual Tree* derive(const std::string) const
  const Tree* left
  const Tree* right
  +Div(const Tree* lhs, const Tree* rhs)
  +Div(const Div* root)
  ~Tree*()
}

class Paren {
  __Private__
  +const Tree* getInner()
  __Public__
  +virtual std::string toString() const
  +virtual double eval(const std::map<std::string, double> vars) const
  +virtual Tree* derive(const std::string var) const
  const Tree* inner
  +Paren(const Tree* t)
  +Paren(const Paren* root)
  ~Paren()
}

class Var {
  __Private__
  +const std::string getVar() const
  __Public__
  +virtual std::string toString() const
  +virtual double eval(const std::map<std::string, double> vars) const
  +virtual Tree* derive(const std::string var) const
  const std::string var;
  +Var(std::string val)
  +Var(const Var* root)
  ~Var()
}

class Constant {
  __Private__
  +const double getValue() const
  __Public__
  +virtual std::string toString() const
  +virtual double eval(const std::map<std::string, double> vars) const
  +virtual Tree* derive(const std::string var) const
  const double value
  +Constant(double val)
  +Constant(const Constant* root)
  ~Constant()
}

Tree <|-l- Add : Derived From
Tree <|-r- Sub : Derived From
Tree <|-u- Mul : Derived From
Tree <|-d- Div : Derived From
Tree <|-u- Paren : Derived From
Tree <|-- Var : Derived From
Tree <|-- Constant : Derived From
@enduml